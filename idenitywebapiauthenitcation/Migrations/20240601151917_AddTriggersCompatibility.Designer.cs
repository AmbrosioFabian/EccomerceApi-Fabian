// <auto-generated />
using System;
using EccomerceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EccomerceApi.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20240601151917_AddTriggersCompatibility")]
    partial class AddTriggersCompatibility
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EccomerceApi.Entity.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Batches", t =>
                        {
                            t.HasTrigger("Batches_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntryTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EntryTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Entries", t =>
                        {
                            t.HasTrigger("Entries_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.EntryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.HasIndex("EntryId");

                    b.HasIndex("ProductId");

                    b.ToTable("EntryDetails", t =>
                        {
                            t.HasTrigger("EntryDetails_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.EntryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntryType", t =>
                        {
                            t.HasTrigger("EntryType_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Compra"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Transferencia de inventario"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Devolución de cliente"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Donación recibida"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Muestra gratuita"
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.Loss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Losses", t =>
                        {
                            t.HasTrigger("Losses_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.LossReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LossReasons", t =>
                        {
                            t.HasTrigger("LossReasons_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Reason = "Daño durante el transporte"
                        },
                        new
                        {
                            Id = 2,
                            Reason = "Fecha de caducidad vencida"
                        },
                        new
                        {
                            Id = 3,
                            Reason = "Robo"
                        },
                        new
                        {
                            Id = 4,
                            Reason = "Producto dañado en el almacén"
                        },
                        new
                        {
                            Id = 5,
                            Reason = "Devolución del cliente"
                        },
                        new
                        {
                            Id = 6,
                            Reason = "Muestra gratuita"
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.LostDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LossId")
                        .HasColumnType("int");

                    b.Property<int?>("LossReasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LossId");

                    b.HasIndex("LossReasonId");

                    b.HasIndex("ProductId");

                    b.ToTable("LostDetails", t =>
                        {
                            t.HasTrigger("LostDetails_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Peoples", t =>
                        {
                            t.HasTrigger("Peoples_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Elm St",
                            LastName = "Lopez",
                            Name = "Luis"
                        },
                        new
                        {
                            Id = 2,
                            Address = "431 Elm St",
                            LastName = "Muñoz",
                            Name = "Jeampierre"
                        },
                        new
                        {
                            Id = 3,
                            Address = "233 Elm St",
                            LastName = "benedicto",
                            Name = "Jean"
                        },
                        new
                        {
                            Id = 4,
                            Address = "432 Elm St",
                            LastName = "Zambrano",
                            Name = "Fabrizzio"
                        },
                        new
                        {
                            Id = 5,
                            Address = "32 Elm St",
                            LastName = "Ambrosio",
                            Name = "Fabian"
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Existence")
                        .HasColumnType("int");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductBrandId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StateId");

                    b.ToTable("Products", t =>
                        {
                            t.HasTrigger("Products_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductBrands", t =>
                        {
                            t.HasTrigger("ProductBrands_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Huawei"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Xiaomi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Motorola"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Lg"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sony"
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", t =>
                        {
                            t.HasTrigger("ProductCategories_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gama Baja"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gama Media"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gama Alta"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gama Top"
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos", t =>
                        {
                            t.HasTrigger("ProductPhotos_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BatteryCapacity")
                        .HasColumnType("int");

                    b.Property<string>("BluetoothVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FrontCameraResolution")
                        .HasColumnType("int");

                    b.Property<int?>("InternalStorage")
                        .HasColumnType("int");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NFC")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ProcessorSpeed")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RAM")
                        .HasColumnType("int");

                    b.Property<string>("RearCameraResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScreenResolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ScreenSize")
                        .HasColumnType("float");

                    b.Property<string>("ScreenTechnology")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sensor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SimCount")
                        .HasColumnType("int");

                    b.Property<string>("SimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SplashResistant")
                        .HasColumnType("bit");

                    b.Property<string>("UsbInterface")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaterResistanceRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Waterproof")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductSpecifications", t =>
                        {
                            t.HasTrigger("ProductSpecifications_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Sales", t =>
                        {
                            t.HasTrigger("Sales_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.SaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleDetails", t =>
                        {
                            t.HasTrigger("SaleDetails_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States", t =>
                        {
                            t.HasTrigger("States_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Activo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactivo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "En espera"
                        },
                        new
                        {
                            Id = 4,
                            Name = "En proceso"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", null, t =>
                        {
                            t.HasTrigger("AspNetRoles_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "managed",
                            NormalizedName = "MANAGED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", null, t =>
                        {
                            t.HasTrigger("AspNetRoleClaims_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasTrigger("AspNetUsers_Trigger");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b
                        .UseTphMappingStrategy()
                        .HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", null, t =>
                        {
                            t.HasTrigger("AspNetUserClaims_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", null, t =>
                        {
                            t.HasTrigger("AspNetUserLogins_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", null, t =>
                        {
                            t.HasTrigger("AspNetUserRoles_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t =>
                        {
                            t.HasTrigger("AspNetUserTokens_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("EccomerceApi.Entity.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("PeopleId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasIndex("PeopleId");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1dec792-eb28-41ed-899c-264d3f85764c",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBGMHXShKGsBZaJGBfpI6nWqY/Ez/ORn7OhTmVhpC81oYKJVMj+P8KHIOPat2W+gRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            PeopleId = 1,
                            StateId = 1
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33e1395c-3c45-4875-a749-c8cf3e89cbe8",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAwBq5xPkIF/aqic7LuOZyt0QP8USPTbR9tVQTR8iFZJR3XPiaAM+L/2GTfR3xPc4w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user",
                            PeopleId = 2,
                            StateId = 1
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f853a160-08ae-4aed-96a1-2ff7d5c83522",
                            Email = "managed@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGED@EXAMPLE.COM",
                            NormalizedUserName = "MANAGED",
                            PasswordHash = "AQAAAAIAAYagAAAAEKwUMn/IXGKc/xEFS+T+Omjb4L3cVWqMgR9tpuyFmMfFCtVcZIj8SCD5XqeK7Wi7XQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "managed",
                            PeopleId = 3,
                            StateId = 1
                        });
                });

            modelBuilder.Entity("EccomerceApi.Entity.Batch", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithMany("Batches")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Entry", b =>
                {
                    b.HasOne("EccomerceApi.Entity.EntryType", "EntryType")
                        .WithMany("EntryDetails")
                        .HasForeignKey("EntryTypeId");

                    b.HasOne("EccomerceApi.Entity.State", "State")
                        .WithMany("Entries")
                        .HasForeignKey("StateId");

                    b.Navigation("EntryType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("EccomerceApi.Entity.EntryDetail", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Batch", "Batch")
                        .WithOne("EntryDetails")
                        .HasForeignKey("EccomerceApi.Entity.EntryDetail", "BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EccomerceApi.Entity.Entry", "Entry")
                        .WithMany("EntryDetails")
                        .HasForeignKey("EntryId");

                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithMany("EntryDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Batch");

                    b.Navigation("Entry");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Loss", b =>
                {
                    b.HasOne("EccomerceApi.Entity.State", "State")
                        .WithMany("Losses")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("EccomerceApi.Entity.LostDetail", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Loss", "Loss")
                        .WithMany("LostDetails")
                        .HasForeignKey("LossId");

                    b.HasOne("EccomerceApi.Entity.LossReason", "LossReason")
                        .WithMany("LostDetails")
                        .HasForeignKey("LossReasonId");

                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithMany("LostDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Loss");

                    b.Navigation("LossReason");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Product", b =>
                {
                    b.HasOne("EccomerceApi.Entity.ProductBrand", "ProductBrand")
                        .WithMany("Products")
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EccomerceApi.Entity.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EccomerceApi.Entity.State", "State")
                        .WithMany("Products")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCategory");

                    b.Navigation("State");
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductPhoto", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductSpecification", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithOne("ProductSpecifications")
                        .HasForeignKey("EccomerceApi.Entity.ProductSpecification", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Sale", b =>
                {
                    b.HasOne("EccomerceApi.Entity.State", "State")
                        .WithMany("Sales")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("EccomerceApi.Entity.SaleDetail", b =>
                {
                    b.HasOne("EccomerceApi.Entity.Batch", "Batch")
                        .WithOne("SaleDetails")
                        .HasForeignKey("EccomerceApi.Entity.SaleDetail", "BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EccomerceApi.Entity.Product", "Product")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ProductId");

                    b.HasOne("EccomerceApi.Entity.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId");

                    b.Navigation("Batch");

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EccomerceApi.Entity.AppUser", b =>
                {
                    b.HasOne("EccomerceApi.Entity.People", "People")
                        .WithMany("AppUsers")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EccomerceApi.Entity.State", "State")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");

                    b.Navigation("State");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Batch", b =>
                {
                    b.Navigation("EntryDetails")
                        .IsRequired();

                    b.Navigation("SaleDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("EccomerceApi.Entity.Entry", b =>
                {
                    b.Navigation("EntryDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.EntryType", b =>
                {
                    b.Navigation("EntryDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Loss", b =>
                {
                    b.Navigation("LostDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.LossReason", b =>
                {
                    b.Navigation("LostDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.People", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Product", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("EntryDetails");

                    b.Navigation("LostDetails");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductSpecifications")
                        .IsRequired();

                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EccomerceApi.Entity.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EccomerceApi.Entity.Sale", b =>
                {
                    b.Navigation("SaleDetails");
                });

            modelBuilder.Entity("EccomerceApi.Entity.State", b =>
                {
                    b.Navigation("AspNetUsers");

                    b.Navigation("Entries");

                    b.Navigation("Losses");

                    b.Navigation("Products");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
